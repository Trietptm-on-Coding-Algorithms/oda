diff --git a/analyzer/windows/lib/api/process.py b/analyzer/windows/lib/api/process.py
index d1be6e1..e17099a 100644
--- a/analyzer/windows/lib/api/process.py
+++ b/analyzer/windows/lib/api/process.py
@@ -21,6 +21,7 @@ from lib.common.errors import get_error_string
 from lib.common.rand import random_string
 from lib.common.results import NetlogFile
 from lib.core.config import Config
+from lib.api.procdump import ProcDump
 
 log = logging.getLogger(__name__)
 
@@ -399,13 +400,6 @@ class Process:
                         "dump aborted", self.pid)
             return False
 
-        self.get_system_info()
-
-        page_size = self.system_info.dwPageSize
-        min_addr = self.system_info.lpMinimumApplicationAddress
-        max_addr = self.system_info.lpMaximumApplicationAddress
-        mem = min_addr
-
         root = os.path.join(PATHS["memory"], str(int(time())))
 
         if not os.path.exists(root):
@@ -414,30 +408,8 @@ class Process:
         # Now upload to host from the StringIO.
         nf = NetlogFile(os.path.join("memory", "%s.dmp" % str(self.pid)))
 
-        while mem < max_addr:
-            mbi = MEMORY_BASIC_INFORMATION()
-            count = c_ulong(0)
-
-            if KERNEL32.VirtualQueryEx(self.h_process,
-                                       mem,
-                                       byref(mbi),
-                                       sizeof(mbi)) < sizeof(mbi):
-                mem += page_size
-                continue
-
-            if mbi.State & MEM_COMMIT and \
-                    mbi.Type & (MEM_IMAGE | MEM_MAPPED | MEM_PRIVATE):
-                buf = create_string_buffer(mbi.RegionSize)
-                if KERNEL32.ReadProcessMemory(self.h_process,
-                                              mem,
-                                              buf,
-                                              mbi.RegionSize,
-                                              byref(count)):
-                    nf.sock.sendall(buf.raw)
-                mem += mbi.RegionSize
-            else:
-                mem += page_size
-
+        pdump = ProcDump(self.pid)
+        pdump.dump_memory(nf.sock)
         nf.close()
 
         log.info("Memory dump of process with pid %d completed", self.pid)

