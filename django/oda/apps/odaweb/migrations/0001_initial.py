# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-14 02:54
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OdaUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BinaryFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('the_file', models.FileField(upload_to=b'uploads')),
                ('filename', models.CharField(max_length=255)),
                ('filesize', models.IntegerField()),
                ('hash', models.CharField(max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BinaryOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.CharField(max_length=128)),
                ('architecture', models.CharField(max_length=128)),
                ('extra_options', models.CharField(default=b'{"flags" : [] }', max_length=256)),
                ('base_address', models.CharField(max_length=18)),
            ],
        ),
        migrations.CreateModel(
            name='BinaryStringStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('binary_string', models.TextField()),
                ('binary_options', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='odaweb.BinaryOptions')),
            ],
        ),
        migrations.CreateModel(
            name='InstDoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.TextField()),
                ('mnemonic', models.TextField()),
                ('short', models.TextField()),
                ('long', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='OdaMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ipAddress', models.CharField(default=b'', max_length=64)),
                ('project_name', models.CharField(default=b'', max_length=64)),
                ('short_name', models.CharField(db_index=True, max_length=12)),
                ('revision', models.IntegerField(default=0)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('copy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.OdaMaster')),
            ],
        ),
        migrations.CreateModel(
            name='OdbFileStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickled_odb_file', models.BinaryField(null=True)),
                ('binary_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.BinaryFile')),
                ('binary_string', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.BinaryStringStorage')),
            ],
        ),
        migrations.CreateModel(
            name='SandboxJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.IntegerField()),
                ('reloaded', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SandboxServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=255)),
                ('port', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=16)),
                ('odaMaster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='odaweb.OdaMaster')),
            ],
        ),
        migrations.AddField(
            model_name='sandboxjob',
            name='server',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.SandboxServer'),
        ),
        migrations.AddField(
            model_name='odamaster',
            name='odb_file_storage',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.OdbFileStorage'),
        ),
        migrations.AddField(
            model_name='odamaster',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='odamaster',
            name='sandbox_job',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.SandboxJob'),
        ),
        migrations.AddField(
            model_name='binaryfile',
            name='binary_options',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='odaweb.BinaryOptions'),
        ),
    ]
